package com.theguaz{	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.filesystem.*;	import flash.utils.ByteArray;	import flash.utils.getTimer;	import flash.utils.Timer;	import com.greensock.*;	import com.greensock.easing.*;	import com.bit101.components.PushButton;	import com.bit101.components.RadioButton;	import net.hires.debug.Stats;	import com.adobe.images.JPGEncoder;	import com.adobe.serialization.json.JSON;	import com.theguaz.PhotoB;		import com.theguaz.utilstheguaz;	public class Main extends MovieClip {		private var _pushShoot:PushButton;		private var _pushSend:PushButton;		private var _pushSave:PushButton;		private var _ref;		private var _ruta:URLRequest = new URLRequest("https://api.instagram.com/v1/tags/suicidegirls/media/recent?access_token=3355298.1fb234f.0144d8ba182d4655b20010d4787a4ca9");		private var _photo:URLRequest;		private var _bitmapData1:BitmapData;		private var _intervalId:int;		private var _saveStartTime:Number;		private var _contenedor:PhotoB;		private var _json:URLLoader;		private var _parsedJSONData:Object;		private var _datos;		private var _PhotoProfileBitmap:Bitmap;		private var _PhotoProfileBitmapData:BitmapData;		private var _loading:loading_mc;		private var fileStream:FileStream;		private var origen:Number = 10;		private var nCount:Number = 10;		private var tiempoEspera:Timer = new Timer(3000,nCount);		private var _passPhoto:String = "";		private var _currentPhoto:String;		var directory:File = File.documentsDirectory.resolvePath("instagramDEMO");		var directory2:File = File.documentsDirectory.resolvePath("instagramDEMO/Printed Images");				private var _urlASK:String = "ruta";		public function Main() {			addEventListener(Event.ADDED_TO_STAGE,configUI);		}		private function configUI(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE,configUI);			_ref = this;			////////// creo directorio			if (! directory.exists) {				directory.createDirectory();				trace("existe");			}			setButtons();			setStage();		}		private function setStage():void {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;		}		private function setButtons() {			addChild(new Stats());			timer_txt.text = String(origen);			_pushShoot = new PushButton(this,0,0,"BUSCAR FOTO",onPushButtonEventHandler);			_pushShoot.x = (stage.stageWidth / 2) -( _pushShoot.width / 2);			_pushShoot.y = (stage.stageHeight / 2) -( _pushShoot.height / 2);		}		private function onPushButtonEventHandler(e:Event) {			var vui:PushButton = e.currentTarget as PushButton;			switch (vui) {				case _pushShoot :					//////// Inicio time					tiempoEspera.start();					tiempoEspera.addEventListener(TimerEvent.TIMER,fLapso);					tiempoEspera.addEventListener(TimerEvent.TIMER_COMPLETE,fLapsoEnd);					decodeJSON();					_pushShoot.visible = false;					break;				case _pushSend :					fSend();					break;			}		}		///////////////////////////////////////////////////		/////////////////////////////////////////////////// TIMER		function fLapso(e:TimerEvent) {			timer_txt.text = String(nCount);			if (nCount <= 1) {			} else {				nCount--;			}		}		function fLapsoEnd(e:TimerEvent) {			// Sacar photo			TweenMax.to(_contenedor, 1, {rotation:-50, y:-300, x:-500, dropShadowFilter:{color:0x000000, alpha:0}, onComplete:fTerminoAnim});			tiempoEspera.stop();		}		///////////////////////////////////////////////////;		/////////////////////////////////////////////////// VUELVO A CARGAR FOTO NUEVA		function fTerminoAnim() {			nCount = origen;			decodeJSON();		}		///////////////////////////////////////////////////		/////////////////////////////////////////////////// INICIO LECTURA DE JSON		private function decodeJSON():void {			/// cargando			_loading = new loading_mc();			addChild(_loading);			_loading.x = (stage.stageWidth / 2) ;			_loading.y = (stage.stageHeight / 2);			///JSON			_json = new URLLoader();			_json.addEventListener(Event.COMPLETE, parseJSON);			_json.load(_ruta);			trace("Loading JSON file...");		}		private function parseJSON(e:Event):void {			trace("JSON file loaded successfully!");			_parsedJSONData = JSON.parse(_json.data);			if ((_parsedJSONData.data as Array).length > 0) {				var l:uint = int(utilstheguaz.randomRange(0, _parsedJSONData.data.length-1));				_photo = new URLRequest(_parsedJSONData.data[l].images.low_resolution.url);				_datos = _parsedJSONData.data[l].caption;				_currentPhoto = _parsedJSONData.data[l].created_time;				tiempoEspera.reset();				tiempoEspera.start();				if (_passPhoto != _currentPhoto) {					trace("ES UNA FOTO NUEVA");					// Cargo foto profile					trace(_parsedJSONData.data[l].caption.from.profile_picture);					var loaderPhotoProfile:Loader = new Loader();					loaderPhotoProfile.load(new URLRequest(_parsedJSONData.data[l].caption.from.profile_picture));					loaderPhotoProfile.contentLoaderInfo.addEventListener(Event.COMPLETE, onCompleteProfile);					loaderPhotoProfile.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loadError);				} else {					trace("LA MISMA FOTO");					onMismoImg();				}			} else {				trace("NO HAY NADA");				decodeJSON();			}		}		private function loadError(e:Event) {			trace("error link photo");		}		private function onMismoImg() {			removeChild(_loading);			TweenMax.to(_contenedor, 1, {rotation:0, y:30, x:((stage.stageWidth/2)-(160)), dropShadowFilter:{color:0x000000, alpha:0.3, blurX:12, blurY:12, distance:7}});		}		private function onCompleteProfile(e:Event) {			if (_contenedor) {				removeChild(_contenedor);			}			_contenedor = new PhotoB();			addChild(_contenedor);			_contenedor.callback = fSave;			_contenedor.fProfile(e, _photo, _datos, _loading);		}		////////////////////////////////////////////////////////////////////		// AL CARGAR TODO SE ENVIA CALLBACK PARA QUE COMIENCE GUARDADO DE FOTO		private function fSave(e:BitmapData) {			var key:Boolean = false;			var ubicacion = (directory.nativePath + "/Printed Images/" + _currentPhoto +".jpg");			var list:Array = directory2.getDirectoryListing();						for (var i:uint = 0; i < list.length; i++) {				if ((list[i].nativePath) == ubicacion) {					key = true;				}			}			if (key == false) {				trace("Start save...");				_bitmapData1 = e;				encodeImages();			} else {				trace("Stop save, this photo was save");				_contenedor.rotation = -50;				_contenedor.scaleX = _contenedor.scaleY = .45;				TweenMax.to(_contenedor, 1, {rotation:0, y:30, x:((stage.stageWidth/2)-(160)), dropShadowFilter:{color:0x000000, alpha:0.3, blurX:12, blurY:12, distance:7}});			}			_passPhoto = _currentPhoto;			/*if (_currentPhoto != _passPhoto) {			trace("Start save...");			_bitmapData1 = e;			encodeImages();			} else {			trace("Stop save, this photo was save");			}						_passPhoto = _currentPhoto;*/		}		///////////////////////////////////////////////////		/////////////////////////////////////////////////// SAVE IMAGE		private function encodeImages():void {			var myEncoder:JPGEncoder = new JPGEncoder(100);			var byteArray1:ByteArray = myEncoder.encode(_bitmapData1);			//var date:String = getDate();			saveImage(byteArray1, 1);			//this.addEventListener(Event.ENTER_FRAME, checkSaveTime);		}		private function checkSaveTime(e:Event):void {			if (getTimer() - _saveStartTime > 10000) {				this.removeEventListener(Event.ENTER_FRAME, checkSaveTime);			}		}		private function saveImage(byteArray:ByteArray, index:Number):void {			var file:File = directory.resolvePath(_currentPhoto + ".jpg");			fileStream = new FileStream();			fileStream.open(file, FileMode.WRITE);			fileStream.writeBytes(byteArray);			fileStream.close();			_contenedor.rotation = -50;			_contenedor.scaleX = _contenedor.scaleY = .45;			TweenMax.to(_contenedor, 1, {rotation:0, y:30, x:((stage.stageWidth/2)-(160)), dropShadowFilter:{color:0x000000, alpha:0.3, blurX:12, blurY:12, distance:7}});			function fileClosed(event:Event):void {				trace("closed event fired");			}		}		///////////////////////////////////////////////////		/////////////////////////////////////////////////// BUSCAR FECHA DE FOTO PARA GUARDAR		///////////////////////////////////////////////////		/////////////////////////////////////////////////// ENVIAR IMAGEN POR BLUETOOTH		function fSend():void {			trace("enviar pro bluetooth");		}		/////////// END OF CLASS	}}